/**
 * ComonlWeb
 * API per ComonlWeb
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AnagraficaGenerica } from '../model/anagraficaGenerica';
import { ApiError } from '../model/apiError';
import { CommaxParametri } from '../model/commaxParametri';
import { ComonlsParametri } from '../model/comonlsParametri';
import { Ruolo } from '../model/ruolo';
import { UserAccessLog } from '../model/userAccessLog';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { CommonServiceInterface }                            from './common.serviceInterface';


@Injectable()
export class CommonService implements CommonServiceInterface {

    protected basePath = 'http://localhost:8080/comonlweb/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Ricerca parametro
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getApplicativoAbilitato(observe?: 'body', reportProgress?: boolean): Observable<ComonlsParametri>;
    public getApplicativoAbilitato(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ComonlsParametri>>;
    public getApplicativoAbilitato(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ComonlsParametri>>;
    public getApplicativoAbilitato(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ComonlsParametri>(`${this.basePath}/common/getApplicativoAbilitato`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca parametro
     * 
     * @param descrizioneParametro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getParametroByDescrizione(descrizioneParametro: string, observe?: 'body', reportProgress?: boolean): Observable<ComonlsParametri>;
    public getParametroByDescrizione(descrizioneParametro: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ComonlsParametri>>;
    public getParametroByDescrizione(descrizioneParametro: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ComonlsParametri>>;
    public getParametroByDescrizione(descrizioneParametro: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (descrizioneParametro === null || descrizioneParametro === undefined) {
            throw new Error('Required parameter descrizioneParametro was null or undefined when calling getParametroByDescrizione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ComonlsParametri>(`${this.basePath}/common/getParametroByDescrizione/${encodeURIComponent(String(descrizioneParametro))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get parametro
     * 
     * @param idParametro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getParametroCommaxById(idParametro: number, observe?: 'body', reportProgress?: boolean): Observable<CommaxParametri>;
    public getParametroCommaxById(idParametro: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CommaxParametri>>;
    public getParametroCommaxById(idParametro: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CommaxParametri>>;
    public getParametroCommaxById(idParametro: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idParametro === null || idParametro === undefined) {
            throw new Error('Required parameter idParametro was null or undefined when calling getParametroCommaxById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CommaxParametri>(`${this.basePath}/common/getParametroCommaxById/${encodeURIComponent(String(idParametro))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce la lista di ruoli legati al codice fiscale dell&#39;identita&#39; di iride registrati su sistema.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRuoli(observe?: 'body', reportProgress?: boolean): Observable<Array<Ruolo>>;
    public getRuoli(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Ruolo>>>;
    public getRuoli(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Ruolo>>>;
    public getRuoli(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Ruolo>>(`${this.basePath}/common/ruolo`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Inserisce dati dello utente loggato sulla tabella di log su sistema.
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public insertUserAccessLog(body?: UserAccessLog, observe?: 'body', reportProgress?: boolean): Observable<UserAccessLog>;
    public insertUserAccessLog(body?: UserAccessLog, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserAccessLog>>;
    public insertUserAccessLog(body?: UserAccessLog, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserAccessLog>>;
    public insertUserAccessLog(body?: UserAccessLog, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UserAccessLog>(`${this.basePath}/common/userAccessLog`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca province
     * 
     * @param cf 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public preCompilaAnagraficaByCf(cf: string, observe?: 'body', reportProgress?: boolean): Observable<AnagraficaGenerica>;
    public preCompilaAnagraficaByCf(cf: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AnagraficaGenerica>>;
    public preCompilaAnagraficaByCf(cf: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AnagraficaGenerica>>;
    public preCompilaAnagraficaByCf(cf: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cf === null || cf === undefined) {
            throw new Error('Required parameter cf was null or undefined when calling preCompilaAnagraficaByCf.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AnagraficaGenerica>(`${this.basePath}/common/pre-compila-anagrafica/${encodeURIComponent(String(cf))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
