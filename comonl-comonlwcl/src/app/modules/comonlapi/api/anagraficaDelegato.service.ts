/**
 * ComonlWeb
 * API per ComonlWeb
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AnagraficaAziAccent } from '../model/anagraficaAziAccent';
import { AnagraficaDelegato } from '../model/anagraficaDelegato';
import { ApiError } from '../model/apiError';
import { DelegatoImpresa } from '../model/delegatoImpresa';
import { FormRicercaAccreditamentoAnagrafiche } from '../model/formRicercaAccreditamentoAnagrafiche';
import { PagedResponseRicercaAccreditamentoAzienda } from '../model/pagedResponseRicercaAccreditamentoAzienda';
import { PagedResponseRicercaAccreditamentoConsulente } from '../model/pagedResponseRicercaAccreditamentoConsulente';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { AnagraficaDelegatoServiceInterface }                            from './anagraficaDelegato.serviceInterface';


@Injectable()
export class AnagraficaDelegatoService implements AnagraficaDelegatoServiceInterface {

    protected basePath = 'http://localhost:8080/comonlweb/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * addAzienda
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addAzienda(body?: DelegatoImpresa, observe?: 'body', reportProgress?: boolean): Observable<DelegatoImpresa>;
    public addAzienda(body?: DelegatoImpresa, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DelegatoImpresa>>;
    public addAzienda(body?: DelegatoImpresa, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DelegatoImpresa>>;
    public addAzienda(body?: DelegatoImpresa, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<DelegatoImpresa>(`${this.basePath}/anagrafica-delegato/ins-azienda`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * addConsulente
     * 
     * @param cfDelegato 
     * @param idSoggettoAbilitato 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addConsulente(cfDelegato: string, idSoggettoAbilitato: number, observe?: 'body', reportProgress?: boolean): Observable<AnagraficaDelegato>;
    public addConsulente(cfDelegato: string, idSoggettoAbilitato: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AnagraficaDelegato>>;
    public addConsulente(cfDelegato: string, idSoggettoAbilitato: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AnagraficaDelegato>>;
    public addConsulente(cfDelegato: string, idSoggettoAbilitato: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cfDelegato === null || cfDelegato === undefined) {
            throw new Error('Required parameter cfDelegato was null or undefined when calling addConsulente.');
        }
        if (idSoggettoAbilitato === null || idSoggettoAbilitato === undefined) {
            throw new Error('Required parameter idSoggettoAbilitato was null or undefined when calling addConsulente.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<AnagraficaDelegato>(`${this.basePath}/anagrafica-delegato/consulente/cf-delegato/${encodeURIComponent(String(cfDelegato))}/soggetto-abilitato/${encodeURIComponent(String(idSoggettoAbilitato))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restuisce AnagraficaDelegato
     * 
     * @param cfDelegato 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAnagraficaDelegatoByCodiceFiscale(cfDelegato: string, observe?: 'body', reportProgress?: boolean): Observable<AnagraficaDelegato>;
    public getAnagraficaDelegatoByCodiceFiscale(cfDelegato: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AnagraficaDelegato>>;
    public getAnagraficaDelegatoByCodiceFiscale(cfDelegato: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AnagraficaDelegato>>;
    public getAnagraficaDelegatoByCodiceFiscale(cfDelegato: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cfDelegato === null || cfDelegato === undefined) {
            throw new Error('Required parameter cfDelegato was null or undefined when calling getAnagraficaDelegatoByCodiceFiscale.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<AnagraficaDelegato>(`${this.basePath}/anagrafica-delegato/${encodeURIComponent(String(cfDelegato))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restuisce un lista di AnagraficaDelegato
     * 
     * @param idSoggettoAbilitato 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAnagraficaDelegatoByIdSoggettoAbilitato(idSoggettoAbilitato: number, observe?: 'body', reportProgress?: boolean): Observable<Array<AnagraficaDelegato>>;
    public getAnagraficaDelegatoByIdSoggettoAbilitato(idSoggettoAbilitato: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AnagraficaDelegato>>>;
    public getAnagraficaDelegatoByIdSoggettoAbilitato(idSoggettoAbilitato: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AnagraficaDelegato>>>;
    public getAnagraficaDelegatoByIdSoggettoAbilitato(idSoggettoAbilitato: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idSoggettoAbilitato === null || idSoggettoAbilitato === undefined) {
            throw new Error('Required parameter idSoggettoAbilitato was null or undefined when calling getAnagraficaDelegatoByIdSoggettoAbilitato.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<AnagraficaDelegato>>(`${this.basePath}/anagrafica-delegato/id-soggetto-abilitato/${encodeURIComponent(String(idSoggettoAbilitato))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restuisce un AnagraficaAziAccent
     * 
     * @param cfImpresa 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAziendaAccentrata(cfImpresa: string, observe?: 'body', reportProgress?: boolean): Observable<AnagraficaAziAccent>;
    public getAziendaAccentrata(cfImpresa: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AnagraficaAziAccent>>;
    public getAziendaAccentrata(cfImpresa: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AnagraficaAziAccent>>;
    public getAziendaAccentrata(cfImpresa: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cfImpresa === null || cfImpresa === undefined) {
            throw new Error('Required parameter cfImpresa was null or undefined when calling getAziendaAccentrata.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<AnagraficaAziAccent>(`${this.basePath}/anagrafica-delegato/azienda-accentrata/${encodeURIComponent(String(cfImpresa))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restuisce i DelegatoImpresa di un&#39;AnagraficaDelegato
     * 
     * @param cfDelegato 
     * @param tipoAnagrafica 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDelegatoImpresaByIdAnagraficadelegato(cfDelegato: string, tipoAnagrafica: string, observe?: 'body', reportProgress?: boolean): Observable<Array<DelegatoImpresa>>;
    public getDelegatoImpresaByIdAnagraficadelegato(cfDelegato: string, tipoAnagrafica: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DelegatoImpresa>>>;
    public getDelegatoImpresaByIdAnagraficadelegato(cfDelegato: string, tipoAnagrafica: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DelegatoImpresa>>>;
    public getDelegatoImpresaByIdAnagraficadelegato(cfDelegato: string, tipoAnagrafica: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cfDelegato === null || cfDelegato === undefined) {
            throw new Error('Required parameter cfDelegato was null or undefined when calling getDelegatoImpresaByIdAnagraficadelegato.');
        }
        if (tipoAnagrafica === null || tipoAnagrafica === undefined) {
            throw new Error('Required parameter tipoAnagrafica was null or undefined when calling getDelegatoImpresaByIdAnagraficadelegato.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<DelegatoImpresa>>(`${this.basePath}/anagrafica-delegato/delegato-impresa/cfDelegato/${encodeURIComponent(String(cfDelegato))}/tipoAnagrafica/${encodeURIComponent(String(tipoAnagrafica))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Post AnagraficaDelegato
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postAnagraficaDelegato(body?: AnagraficaDelegato, observe?: 'body', reportProgress?: boolean): Observable<AnagraficaDelegato>;
    public postAnagraficaDelegato(body?: AnagraficaDelegato, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AnagraficaDelegato>>;
    public postAnagraficaDelegato(body?: AnagraficaDelegato, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AnagraficaDelegato>>;
    public postAnagraficaDelegato(body?: AnagraficaDelegato, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<AnagraficaDelegato>(`${this.basePath}/anagrafica-delegato`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postAziendaAccentrata
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postAziendaAccentrata(body?: AnagraficaAziAccent, observe?: 'body', reportProgress?: boolean): Observable<AnagraficaAziAccent>;
    public postAziendaAccentrata(body?: AnagraficaAziAccent, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AnagraficaAziAccent>>;
    public postAziendaAccentrata(body?: AnagraficaAziAccent, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AnagraficaAziAccent>>;
    public postAziendaAccentrata(body?: AnagraficaAziAccent, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<AnagraficaAziAccent>(`${this.basePath}/anagrafica-delegato/azienda-accentrata`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca accreditamento per studio prof. e aziende
     * 
     * @param body 
     * @param offset 
     * @param limit 
     * @param sort 
     * @param direction 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postRicercaAccreditamentoAzienda(body?: FormRicercaAccreditamentoAnagrafiche, offset?: number, limit?: number, sort?: string, direction?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResponseRicercaAccreditamentoAzienda>;
    public postRicercaAccreditamentoAzienda(body?: FormRicercaAccreditamentoAnagrafiche, offset?: number, limit?: number, sort?: string, direction?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResponseRicercaAccreditamentoAzienda>>;
    public postRicercaAccreditamentoAzienda(body?: FormRicercaAccreditamentoAnagrafiche, offset?: number, limit?: number, sort?: string, direction?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResponseRicercaAccreditamentoAzienda>>;
    public postRicercaAccreditamentoAzienda(body?: FormRicercaAccreditamentoAnagrafiche, offset?: number, limit?: number, sort?: string, direction?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResponseRicercaAccreditamentoAzienda>(`${this.basePath}/anagrafica-delegato/ricerca-accreditamento-zienda`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca accreditamento per consulenti e persone fisiche
     * 
     * @param body 
     * @param offset 
     * @param limit 
     * @param sort 
     * @param direction 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postRicercaAccreditamentoConsulente(body?: FormRicercaAccreditamentoAnagrafiche, offset?: number, limit?: number, sort?: string, direction?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResponseRicercaAccreditamentoConsulente>;
    public postRicercaAccreditamentoConsulente(body?: FormRicercaAccreditamentoAnagrafiche, offset?: number, limit?: number, sort?: string, direction?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResponseRicercaAccreditamentoConsulente>>;
    public postRicercaAccreditamentoConsulente(body?: FormRicercaAccreditamentoAnagrafiche, offset?: number, limit?: number, sort?: string, direction?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResponseRicercaAccreditamentoConsulente>>;
    public postRicercaAccreditamentoConsulente(body?: FormRicercaAccreditamentoAnagrafiche, offset?: number, limit?: number, sort?: string, direction?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResponseRicercaAccreditamentoConsulente>(`${this.basePath}/anagrafica-delegato/ricerca-accreditamento-consulente`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Put AnagraficaDelegato
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putAnagraficaDelegato(body?: AnagraficaDelegato, observe?: 'body', reportProgress?: boolean): Observable<AnagraficaDelegato>;
    public putAnagraficaDelegato(body?: AnagraficaDelegato, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AnagraficaDelegato>>;
    public putAnagraficaDelegato(body?: AnagraficaDelegato, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AnagraficaDelegato>>;
    public putAnagraficaDelegato(body?: AnagraficaDelegato, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<AnagraficaDelegato>(`${this.basePath}/anagrafica-delegato`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * putAziendaAccentrata
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putAziendaAccentrata(body?: AnagraficaAziAccent, observe?: 'body', reportProgress?: boolean): Observable<AnagraficaAziAccent>;
    public putAziendaAccentrata(body?: AnagraficaAziAccent, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AnagraficaAziAccent>>;
    public putAziendaAccentrata(body?: AnagraficaAziAccent, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AnagraficaAziAccent>>;
    public putAziendaAccentrata(body?: AnagraficaAziAccent, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<AnagraficaAziAccent>(`${this.basePath}/anagrafica-delegato/azienda-accentrata`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * removeConsulente
     * 
     * @param cfDelegato 
     * @param idSoggettoAbilitato 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeConsulente(cfDelegato: string, idSoggettoAbilitato: number, observe?: 'body', reportProgress?: boolean): Observable<AnagraficaDelegato>;
    public removeConsulente(cfDelegato: string, idSoggettoAbilitato: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AnagraficaDelegato>>;
    public removeConsulente(cfDelegato: string, idSoggettoAbilitato: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AnagraficaDelegato>>;
    public removeConsulente(cfDelegato: string, idSoggettoAbilitato: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cfDelegato === null || cfDelegato === undefined) {
            throw new Error('Required parameter cfDelegato was null or undefined when calling removeConsulente.');
        }
        if (idSoggettoAbilitato === null || idSoggettoAbilitato === undefined) {
            throw new Error('Required parameter idSoggettoAbilitato was null or undefined when calling removeConsulente.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<AnagraficaDelegato>(`${this.basePath}/anagrafica-delegato/remove-consulente/cf-delegato/${encodeURIComponent(String(cfDelegato))}/soggetto-abilitato/${encodeURIComponent(String(idSoggettoAbilitato))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Annulla o ripristina un AnagraficaDelegato impostando dataAnnullamento a data di sistema
     * 
     * @param cfDelegato 
     * @param tipoAnagrafica 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setDataAnnullamentoCDE(cfDelegato: string, tipoAnagrafica: string, observe?: 'body', reportProgress?: boolean): Observable<Date>;
    public setDataAnnullamentoCDE(cfDelegato: string, tipoAnagrafica: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Date>>;
    public setDataAnnullamentoCDE(cfDelegato: string, tipoAnagrafica: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Date>>;
    public setDataAnnullamentoCDE(cfDelegato: string, tipoAnagrafica: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cfDelegato === null || cfDelegato === undefined) {
            throw new Error('Required parameter cfDelegato was null or undefined when calling setDataAnnullamentoCDE.');
        }
        if (tipoAnagrafica === null || tipoAnagrafica === undefined) {
            throw new Error('Required parameter tipoAnagrafica was null or undefined when calling setDataAnnullamentoCDE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<Date>(`${this.basePath}/anagrafica-delegato/data-annullamento-cde/cf-delegato/${encodeURIComponent(String(cfDelegato))}/tipo-anagrafica/${encodeURIComponent(String(tipoAnagrafica))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Stampa elenco anagrafica delegati
     * 
     * @param tipoFormato 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stampaElencoAnagraficheDelegato(tipoFormato: string, body?: FormRicercaAccreditamentoAnagrafiche, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public stampaElencoAnagraficheDelegato(tipoFormato: string, body?: FormRicercaAccreditamentoAnagrafiche, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public stampaElencoAnagraficheDelegato(tipoFormato: string, body?: FormRicercaAccreditamentoAnagrafiche, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public stampaElencoAnagraficheDelegato(tipoFormato: string, body?: FormRicercaAccreditamentoAnagrafiche, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (tipoFormato === null || tipoFormato === undefined) {
            throw new Error('Required parameter tipoFormato was null or undefined when calling stampaElencoAnagraficheDelegato.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/pdf'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/anagrafica-delegato/stampa-elenco-anagrafiche-delegato/${encodeURIComponent(String(tipoFormato))}`,
            body,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Stampa elenco studi aziende
     * 
     * @param tipoFormato 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stampaElencoStudiAziende(tipoFormato: string, body?: FormRicercaAccreditamentoAnagrafiche, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public stampaElencoStudiAziende(tipoFormato: string, body?: FormRicercaAccreditamentoAnagrafiche, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public stampaElencoStudiAziende(tipoFormato: string, body?: FormRicercaAccreditamentoAnagrafiche, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public stampaElencoStudiAziende(tipoFormato: string, body?: FormRicercaAccreditamentoAnagrafiche, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (tipoFormato === null || tipoFormato === undefined) {
            throw new Error('Required parameter tipoFormato was null or undefined when calling stampaElencoStudiAziende.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/pdf'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/anagrafica-delegato/stampa-elenco-studi-aziende/${encodeURIComponent(String(tipoFormato))}`,
            body,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
