/**
 * ComonlWeb
 * API per ComonlWeb
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { CaricaPersonaPv } from '../model/caricaPersonaPv';
import { CategLavAssObbl } from '../model/categLavAssObbl';
import { CategTirocinante } from '../model/categTirocinante';
import { Cessazionerl } from '../model/cessazionerl';
import { Cittadinanza } from '../model/cittadinanza';
import { Cpi } from '../model/cpi';
import { DecodificaGenerica } from '../model/decodificaGenerica';
import { EntePrevidenziale } from '../model/entePrevidenziale';
import { GradoContrattuale } from '../model/gradoContrattuale';
import { LivelloStudio } from '../model/livelloStudio';
import { MotivoPermesso } from '../model/motivoPermesso';
import { NaturaGiuridica } from '../model/naturaGiuridica';
import { Personalizzazione } from '../model/personalizzazione';
import { Provincia } from '../model/provincia';
import { Questura } from '../model/questura';
import { StatiEsteri } from '../model/statiEsteri';
import { StatoComunicazione } from '../model/statoComunicazione';
import { StatoDelega } from '../model/statoDelega';
import { StatusStraniero } from '../model/statusStraniero';
import { TipoAttoL68 } from '../model/tipoAttoL68';
import { TipoComunicazione } from '../model/tipoComunicazione';
import { TipoComunicazioneTu } from '../model/tipoComunicazioneTu';
import { TipoContratti } from '../model/tipoContratti';
import { TipoEntePromTirocinio } from '../model/tipoEntePromTirocinio';
import { TipoOrario } from '../model/tipoOrario';
import { TipoSoggettoAbilitato } from '../model/tipoSoggettoAbilitato';
import { TipoTrasferimento } from '../model/tipoTrasferimento';
import { TipologiaTirocinio } from '../model/tipologiaTirocinio';
import { Toponimo } from '../model/toponimo';
import { Trasformazionerl } from '../model/trasformazionerl';
import { VariazioneSomm } from '../model/variazioneSomm';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { DecodificaServiceInterface }                            from './decodifica.serviceInterface';


@Injectable()
export class DecodificaService implements DecodificaServiceInterface {

    protected basePath = 'http://localhost:8080/comonlweb/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Ricerca CaricaPersonaPv
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCaricaPersonaPv(observe?: 'body', reportProgress?: boolean): Observable<Array<CaricaPersonaPv>>;
    public getCaricaPersonaPv(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CaricaPersonaPv>>>;
    public getCaricaPersonaPv(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CaricaPersonaPv>>>;
    public getCaricaPersonaPv(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CaricaPersonaPv>>(`${this.basePath}/decodifica/carica-persona-pv`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca CategLavoratore
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCategLavoratoreAssObbl(observe?: 'body', reportProgress?: boolean): Observable<Array<CategLavAssObbl>>;
    public getCategLavoratoreAssObbl(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CategLavAssObbl>>>;
    public getCategLavoratoreAssObbl(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CategLavAssObbl>>>;
    public getCategLavoratoreAssObbl(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CategLavAssObbl>>(`${this.basePath}/decodifica/categ-lavoratore`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca CategTirocinante
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCategTirocinante(observe?: 'body', reportProgress?: boolean): Observable<Array<CategTirocinante>>;
    public getCategTirocinante(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CategTirocinante>>>;
    public getCategTirocinante(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CategTirocinante>>>;
    public getCategTirocinante(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CategTirocinante>>(`${this.basePath}/decodifica/categ-tirocinante`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca Cessazionerl
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCessazionerl(observe?: 'body', reportProgress?: boolean): Observable<Array<Cessazionerl>>;
    public getCessazionerl(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cessazionerl>>>;
    public getCessazionerl(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cessazionerl>>>;
    public getCessazionerl(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Cessazionerl>>(`${this.basePath}/decodifica/cessazionerl`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca Cittadinanza
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCittadinanza(observe?: 'body', reportProgress?: boolean): Observable<Array<Cittadinanza>>;
    public getCittadinanza(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cittadinanza>>>;
    public getCittadinanza(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cittadinanza>>>;
    public getCittadinanza(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Cittadinanza>>(`${this.basePath}/decodifica/cittadinanza`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca CategTirocinante
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCpiEntePromTirocinio(observe?: 'body', reportProgress?: boolean): Observable<Array<Cpi>>;
    public getCpiEntePromTirocinio(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cpi>>>;
    public getCpiEntePromTirocinio(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cpi>>>;
    public getCpiEntePromTirocinio(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Cpi>>(`${this.basePath}/decodifica/cpi`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca CategTirocinante
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEntePrevidenziale(observe?: 'body', reportProgress?: boolean): Observable<Array<EntePrevidenziale>>;
    public getEntePrevidenziale(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EntePrevidenziale>>>;
    public getEntePrevidenziale(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EntePrevidenziale>>>;
    public getEntePrevidenziale(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<EntePrevidenziale>>(`${this.basePath}/decodifica/ente-previdenziale`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca GradoContrattuale
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGradoContrattuale(observe?: 'body', reportProgress?: boolean): Observable<Array<GradoContrattuale>>;
    public getGradoContrattuale(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GradoContrattuale>>>;
    public getGradoContrattuale(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GradoContrattuale>>>;
    public getGradoContrattuale(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<GradoContrattuale>>(`${this.basePath}/decodifica/gradoContrattuale`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca LivelloStudio
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLivelloStudio(observe?: 'body', reportProgress?: boolean): Observable<Array<LivelloStudio>>;
    public getLivelloStudio(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LivelloStudio>>>;
    public getLivelloStudio(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LivelloStudio>>>;
    public getLivelloStudio(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<LivelloStudio>>(`${this.basePath}/decodifica/livello-studio`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca MotivoPermesso
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMotivoPermesso(observe?: 'body', reportProgress?: boolean): Observable<Array<MotivoPermesso>>;
    public getMotivoPermesso(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MotivoPermesso>>>;
    public getMotivoPermesso(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MotivoPermesso>>>;
    public getMotivoPermesso(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<MotivoPermesso>>(`${this.basePath}/decodifica/motivo-permesso`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca NaturaGiuridica
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNaturaGiuridica(observe?: 'body', reportProgress?: boolean): Observable<Array<NaturaGiuridica>>;
    public getNaturaGiuridica(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<NaturaGiuridica>>>;
    public getNaturaGiuridica(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<NaturaGiuridica>>>;
    public getNaturaGiuridica(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<NaturaGiuridica>>(`${this.basePath}/decodifica/natura-giuridica`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca persnalizzazine by pv
     * 
     * @param pv 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPersonalizzazioneByPv(pv: string, observe?: 'body', reportProgress?: boolean): Observable<Personalizzazione>;
    public getPersonalizzazioneByPv(pv: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Personalizzazione>>;
    public getPersonalizzazioneByPv(pv: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Personalizzazione>>;
    public getPersonalizzazioneByPv(pv: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (pv === null || pv === undefined) {
            throw new Error('Required parameter pv was null or undefined when calling getPersonalizzazioneByPv.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Personalizzazione>(`${this.basePath}/decodifica/getPersonalizzazioneByPv/${encodeURIComponent(String(pv))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca province
     * 
     * @param codRegioneMin 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProvincia(codRegioneMin: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Provincia>>;
    public getProvincia(codRegioneMin: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Provincia>>>;
    public getProvincia(codRegioneMin: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Provincia>>>;
    public getProvincia(codRegioneMin: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (codRegioneMin === null || codRegioneMin === undefined) {
            throw new Error('Required parameter codRegioneMin was null or undefined when calling getProvincia.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Provincia>>(`${this.basePath}/decodifica/provincia/${encodeURIComponent(String(codRegioneMin))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca Questura
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQuestura(observe?: 'body', reportProgress?: boolean): Observable<Array<Questura>>;
    public getQuestura(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Questura>>>;
    public getQuestura(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Questura>>>;
    public getQuestura(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Questura>>(`${this.basePath}/decodifica/questura`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca StatoComunicazione
     * 
     * @param flgRicerca 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStatoComunicazione(flgRicerca: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<StatoComunicazione>>;
    public getStatoComunicazione(flgRicerca: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StatoComunicazione>>>;
    public getStatoComunicazione(flgRicerca: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StatoComunicazione>>>;
    public getStatoComunicazione(flgRicerca: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (flgRicerca === null || flgRicerca === undefined) {
            throw new Error('Required parameter flgRicerca was null or undefined when calling getStatoComunicazione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<StatoComunicazione>>(`${this.basePath}/decodifica/stato-comunicazione/${encodeURIComponent(String(flgRicerca))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca StatoDelega
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStatoDelega(observe?: 'body', reportProgress?: boolean): Observable<Array<StatoDelega>>;
    public getStatoDelega(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StatoDelega>>>;
    public getStatoDelega(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StatoDelega>>>;
    public getStatoDelega(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<StatoDelega>>(`${this.basePath}/decodifica/stato-delega`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca StatoEsteroCf
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStatoEsteroCf(observe?: 'body', reportProgress?: boolean): Observable<Array<StatiEsteri>>;
    public getStatoEsteroCf(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StatiEsteri>>>;
    public getStatoEsteroCf(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StatiEsteri>>>;
    public getStatoEsteroCf(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<StatiEsteri>>(`${this.basePath}/decodifica/stato-estero`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca TipoAttoL68
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipoAttoL68(observe?: 'body', reportProgress?: boolean): Observable<Array<TipoAttoL68>>;
    public getTipoAttoL68(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoAttoL68>>>;
    public getTipoAttoL68(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoAttoL68>>>;
    public getTipoAttoL68(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoAttoL68>>(`${this.basePath}/decodifica/tipo-atto-l68`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca TipoComunicazione
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipoComunicazione(observe?: 'body', reportProgress?: boolean): Observable<Array<TipoComunicazione>>;
    public getTipoComunicazione(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoComunicazione>>>;
    public getTipoComunicazione(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoComunicazione>>>;
    public getTipoComunicazione(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoComunicazione>>(`${this.basePath}/decodifica/tipo-comunicazione`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca TipoComunicazioneTu
     * 
     * @param flgRicerca 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipoComunicazioneTu(flgRicerca: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TipoComunicazioneTu>>;
    public getTipoComunicazioneTu(flgRicerca: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoComunicazioneTu>>>;
    public getTipoComunicazioneTu(flgRicerca: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoComunicazioneTu>>>;
    public getTipoComunicazioneTu(flgRicerca: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (flgRicerca === null || flgRicerca === undefined) {
            throw new Error('Required parameter flgRicerca was null or undefined when calling getTipoComunicazioneTu.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoComunicazioneTu>>(`${this.basePath}/decodifica/tipo-comunicazione-tu/${encodeURIComponent(String(flgRicerca))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca TipoContratto
     * 
     * @param tipoTracciato 
     * @param tipoComunicazione 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipoContrattiByTracciatoAndTipoComunicazione(tipoTracciato: string, tipoComunicazione: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TipoContratti>>;
    public getTipoContrattiByTracciatoAndTipoComunicazione(tipoTracciato: string, tipoComunicazione: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoContratti>>>;
    public getTipoContrattiByTracciatoAndTipoComunicazione(tipoTracciato: string, tipoComunicazione: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoContratti>>>;
    public getTipoContrattiByTracciatoAndTipoComunicazione(tipoTracciato: string, tipoComunicazione: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (tipoTracciato === null || tipoTracciato === undefined) {
            throw new Error('Required parameter tipoTracciato was null or undefined when calling getTipoContrattiByTracciatoAndTipoComunicazione.');
        }
        if (tipoComunicazione === null || tipoComunicazione === undefined) {
            throw new Error('Required parameter tipoComunicazione was null or undefined when calling getTipoContrattiByTracciatoAndTipoComunicazione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoContratti>>(`${this.basePath}/decodifica/tipo-contratti/tipo-tracciato/${encodeURIComponent(String(tipoTracciato))}/tipo-comunicazione/${encodeURIComponent(String(tipoComunicazione))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca TipoContratto
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipoContratto(observe?: 'body', reportProgress?: boolean): Observable<Array<TipoContratti>>;
    public getTipoContratto(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoContratti>>>;
    public getTipoContratto(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoContratti>>>;
    public getTipoContratto(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoContratti>>(`${this.basePath}/decodifica/tipo-contratto`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca TipoEntePromTirocinio
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipoEntePromTirocinio(observe?: 'body', reportProgress?: boolean): Observable<Array<TipoEntePromTirocinio>>;
    public getTipoEntePromTirocinio(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoEntePromTirocinio>>>;
    public getTipoEntePromTirocinio(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoEntePromTirocinio>>>;
    public getTipoEntePromTirocinio(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoEntePromTirocinio>>(`${this.basePath}/decodifica/tipo-ente-promotore-tirocinio`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca TipoOrario
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipoOrario(observe?: 'body', reportProgress?: boolean): Observable<Array<TipoOrario>>;
    public getTipoOrario(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoOrario>>>;
    public getTipoOrario(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoOrario>>>;
    public getTipoOrario(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoOrario>>(`${this.basePath}/decodifica/tipo-orario`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca TipoSoggettoAbilitato
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipoSoggettoAbilitato(observe?: 'body', reportProgress?: boolean): Observable<Array<TipoSoggettoAbilitato>>;
    public getTipoSoggettoAbilitato(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoSoggettoAbilitato>>>;
    public getTipoSoggettoAbilitato(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoSoggettoAbilitato>>>;
    public getTipoSoggettoAbilitato(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoSoggettoAbilitato>>(`${this.basePath}/decodifica/tipo-soggetto-abilitato`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca TipoSoggettoAbilitato
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipoStudioProfessionale(observe?: 'body', reportProgress?: boolean): Observable<Array<TipoSoggettoAbilitato>>;
    public getTipoStudioProfessionale(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoSoggettoAbilitato>>>;
    public getTipoStudioProfessionale(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoSoggettoAbilitato>>>;
    public getTipoStudioProfessionale(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoSoggettoAbilitato>>(`${this.basePath}/decodifica/tipo-studio-professionale`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca TipoVariazione
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipoTrasferimento(observe?: 'body', reportProgress?: boolean): Observable<Array<TipoTrasferimento>>;
    public getTipoTrasferimento(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoTrasferimento>>>;
    public getTipoTrasferimento(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoTrasferimento>>>;
    public getTipoTrasferimento(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoTrasferimento>>(`${this.basePath}/decodifica/tipo-trasferimento`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca TipologiaTirocinio
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipologiaTirocinio(observe?: 'body', reportProgress?: boolean): Observable<Array<TipologiaTirocinio>>;
    public getTipologiaTirocinio(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipologiaTirocinio>>>;
    public getTipologiaTirocinio(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipologiaTirocinio>>>;
    public getTipologiaTirocinio(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipologiaTirocinio>>(`${this.basePath}/decodifica/tipologia-tirocinio`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca TitoloSoggiorno
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTitoloSoggiorno(observe?: 'body', reportProgress?: boolean): Observable<Array<StatusStraniero>>;
    public getTitoloSoggiorno(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StatusStraniero>>>;
    public getTitoloSoggiorno(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StatusStraniero>>>;
    public getTitoloSoggiorno(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<StatusStraniero>>(`${this.basePath}/decodifica/titolo-soggiorno`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca Toponimo
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getToponimo(observe?: 'body', reportProgress?: boolean): Observable<Array<Toponimo>>;
    public getToponimo(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Toponimo>>>;
    public getToponimo(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Toponimo>>>;
    public getToponimo(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Toponimo>>(`${this.basePath}/decodifica/toponimo`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca Trasformazionerl
     * 
     * @param tipo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTrasformazionerlByTipo(tipo: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Trasformazionerl>>;
    public getTrasformazionerlByTipo(tipo: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Trasformazionerl>>>;
    public getTrasformazionerlByTipo(tipo: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Trasformazionerl>>>;
    public getTrasformazionerlByTipo(tipo: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (tipo === null || tipo === undefined) {
            throw new Error('Required parameter tipo was null or undefined when calling getTrasformazionerlByTipo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Trasformazionerl>>(`${this.basePath}/decodifica/trasformazionerl/${encodeURIComponent(String(tipo))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca VariazioneSomm
     * 
     * @param idTipoSomm 
     * @param idTipoComunicazione 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVariazioneSommByTipoSommAndTipoCom(idTipoSomm: number, idTipoComunicazione: string, observe?: 'body', reportProgress?: boolean): Observable<VariazioneSomm>;
    public getVariazioneSommByTipoSommAndTipoCom(idTipoSomm: number, idTipoComunicazione: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VariazioneSomm>>;
    public getVariazioneSommByTipoSommAndTipoCom(idTipoSomm: number, idTipoComunicazione: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VariazioneSomm>>;
    public getVariazioneSommByTipoSommAndTipoCom(idTipoSomm: number, idTipoComunicazione: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idTipoSomm === null || idTipoSomm === undefined) {
            throw new Error('Required parameter idTipoSomm was null or undefined when calling getVariazioneSommByTipoSommAndTipoCom.');
        }
        if (idTipoComunicazione === null || idTipoComunicazione === undefined) {
            throw new Error('Required parameter idTipoComunicazione was null or undefined when calling getVariazioneSommByTipoSommAndTipoCom.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<VariazioneSomm>(`${this.basePath}/decodifica/variazione-somm/tipo-somm/${encodeURIComponent(String(idTipoSomm))}/tipo-comunicazione/${encodeURIComponent(String(idTipoComunicazione))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca ateco
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postAtecofinDecodifica(body?: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postAtecofinDecodifica(body?: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postAtecofinDecodifica(body?: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postAtecofinDecodifica(body?: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/ateco-fin-decodifica`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca ccnl
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCcnlDecodifica(body?: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postCcnlDecodifica(body?: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postCcnlDecodifica(body?: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postCcnlDecodifica(body?: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/ccnl-decodifica`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca comune
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postComuneDecodifica(body?: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postComuneDecodifica(body?: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postComuneDecodifica(body?: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postComuneDecodifica(body?: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/comune-decodifica`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca inquadramento
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postLivelloRetribuzioneDecodifica(body?: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postLivelloRetribuzioneDecodifica(body?: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postLivelloRetribuzioneDecodifica(body?: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postLivelloRetribuzioneDecodifica(body?: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/livello-retribuzione-decodifica`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca qualifica istat
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postQualificaDecodifica(body?: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postQualificaDecodifica(body?: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postQualificaDecodifica(body?: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postQualificaDecodifica(body?: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/qualifica-istat-decodifica`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca stato estero
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postStatiEsteriDecodifica(body?: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postStatiEsteriDecodifica(body?: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postStatiEsteriDecodifica(body?: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postStatiEsteriDecodifica(body?: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/stati-esteri-decodifica`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca Tipoi di comunicazione per tracciato UNILAV
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postTipoComunicazioneUnilavDecodifica(body?: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postTipoComunicazioneUnilavDecodifica(body?: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postTipoComunicazioneUnilavDecodifica(body?: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postTipoComunicazioneUnilavDecodifica(body?: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/tipo-comunicazione-unilav`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca Tipoi di comunicazione per tracciato UNISOMM
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postTipoComunicazioneUnisommDecodifica(body?: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postTipoComunicazioneUnisommDecodifica(body?: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postTipoComunicazioneUnisommDecodifica(body?: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postTipoComunicazioneUnisommDecodifica(body?: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/tipo-comunicazione-unisomm`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
