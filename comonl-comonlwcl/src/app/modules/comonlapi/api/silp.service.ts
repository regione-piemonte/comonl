/**
 * ComonlWeb
 * API per ComonlWeb
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { DatiAzienda } from '../model/datiAzienda';
import { LavoratoreSilpEspanso } from '../model/lavoratoreSilpEspanso';
import { Sede } from '../model/sede';
import { WrapperLavoratoreSilpEspanso } from '../model/wrapperLavoratoreSilpEspanso';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { SilpServiceInterface }                            from './silp.serviceInterface';


@Injectable()
export class SilpService implements SilpServiceInterface {

    protected basePath = 'http://localhost:8080/comonlweb/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Ricerca Azienda su AAEP
     * 
     * @param codiceFiscale 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAziendaAaep(codiceFiscale: string, observe?: 'body', reportProgress?: boolean): Observable<DatiAzienda>;
    public getAziendaAaep(codiceFiscale: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DatiAzienda>>;
    public getAziendaAaep(codiceFiscale: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DatiAzienda>>;
    public getAziendaAaep(codiceFiscale: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (codiceFiscale === null || codiceFiscale === undefined) {
            throw new Error('Required parameter codiceFiscale was null or undefined when calling getAziendaAaep.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DatiAzienda>(`${this.basePath}/silp/aziendaAaep/${encodeURIComponent(String(codiceFiscale))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca Azienda su Silp
     * 
     * @param codiceFiscale 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAziendaSilp(codiceFiscale: string, observe?: 'body', reportProgress?: boolean): Observable<DatiAzienda>;
    public getAziendaSilp(codiceFiscale: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DatiAzienda>>;
    public getAziendaSilp(codiceFiscale: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DatiAzienda>>;
    public getAziendaSilp(codiceFiscale: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (codiceFiscale === null || codiceFiscale === undefined) {
            throw new Error('Required parameter codiceFiscale was null or undefined when calling getAziendaSilp.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DatiAzienda>(`${this.basePath}/silp/azienda/${encodeURIComponent(String(codiceFiscale))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca Lavoratore Espanso su Silp
     * 
     * @param codiceFiscale 
     * @param cognome 
     * @param nome 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLavoratoreSilpEspanso(codiceFiscale: string, cognome?: string, nome?: string, observe?: 'body', reportProgress?: boolean): Observable<LavoratoreSilpEspanso>;
    public getLavoratoreSilpEspanso(codiceFiscale: string, cognome?: string, nome?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LavoratoreSilpEspanso>>;
    public getLavoratoreSilpEspanso(codiceFiscale: string, cognome?: string, nome?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LavoratoreSilpEspanso>>;
    public getLavoratoreSilpEspanso(codiceFiscale: string, cognome?: string, nome?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (codiceFiscale === null || codiceFiscale === undefined) {
            throw new Error('Required parameter codiceFiscale was null or undefined when calling getLavoratoreSilpEspanso.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cognome !== undefined && cognome !== null) {
            queryParameters = queryParameters.set('cognome', <any>cognome);
        }
        if (nome !== undefined && nome !== null) {
            queryParameters = queryParameters.set('nome', <any>nome);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<LavoratoreSilpEspanso>(`${this.basePath}/silp/lavoratore/${encodeURIComponent(String(codiceFiscale))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ricerca Sedi su Silp
     * 
     * @param idAzienda 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSediSilp(idAzienda: string, observe?: 'body', reportProgress?: boolean): Observable<Sede>;
    public getSediSilp(idAzienda: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Sede>>;
    public getSediSilp(idAzienda: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Sede>>;
    public getSediSilp(idAzienda: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idAzienda === null || idAzienda === undefined) {
            throw new Error('Required parameter idAzienda was null or undefined when calling getSediSilp.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Sede>(`${this.basePath}/silp/sedi/${encodeURIComponent(String(idAzienda))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Put azienza
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putAziendaSilp(body?: DatiAzienda, observe?: 'body', reportProgress?: boolean): Observable<DatiAzienda>;
    public putAziendaSilp(body?: DatiAzienda, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DatiAzienda>>;
    public putAziendaSilp(body?: DatiAzienda, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DatiAzienda>>;
    public putAziendaSilp(body?: DatiAzienda, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<DatiAzienda>(`${this.basePath}/silp/azienda/save`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Put lavoratore
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putLavoratoreSilp(body?: LavoratoreSilpEspanso, observe?: 'body', reportProgress?: boolean): Observable<LavoratoreSilpEspanso>;
    public putLavoratoreSilp(body?: LavoratoreSilpEspanso, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LavoratoreSilpEspanso>>;
    public putLavoratoreSilp(body?: LavoratoreSilpEspanso, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LavoratoreSilpEspanso>>;
    public putLavoratoreSilp(body?: LavoratoreSilpEspanso, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<LavoratoreSilpEspanso>(`${this.basePath}/silp/lavoratore/save`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Put lavoratore silp da co
     * 
     * @param flgRettifica 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putLavoratoreSilpDaCo(flgRettifica: boolean, body?: WrapperLavoratoreSilpEspanso, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public putLavoratoreSilpDaCo(flgRettifica: boolean, body?: WrapperLavoratoreSilpEspanso, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public putLavoratoreSilpDaCo(flgRettifica: boolean, body?: WrapperLavoratoreSilpEspanso, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public putLavoratoreSilpDaCo(flgRettifica: boolean, body?: WrapperLavoratoreSilpEspanso, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (flgRettifica === null || flgRettifica === undefined) {
            throw new Error('Required parameter flgRettifica was null or undefined when calling putLavoratoreSilpDaCo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<string>(`${this.basePath}/silp/lavoratore/save-da-co/flg-rettifica/${encodeURIComponent(String(flgRettifica))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
