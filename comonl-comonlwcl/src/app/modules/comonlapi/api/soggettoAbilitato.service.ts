/**
 * ComonlWeb
 * API per ComonlWeb
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { SetDataAnnullamentoSoggettoAbilitatoRes } from '../model/setDataAnnullamentoSoggettoAbilitatoRes';
import { SoggettoAbilitato } from '../model/soggettoAbilitato';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { SoggettoAbilitatoServiceInterface }                            from './soggettoAbilitato.serviceInterface';


@Injectable()
export class SoggettoAbilitatoService implements SoggettoAbilitatoServiceInterface {

    protected basePath = 'http://localhost:8080/comonlweb/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * SoggettoAbilitato
     * 
     * @param idSeoggettoAbilitato 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSoggettoAbilitatoById(idSeoggettoAbilitato: number, observe?: 'body', reportProgress?: boolean): Observable<SoggettoAbilitato>;
    public getSoggettoAbilitatoById(idSeoggettoAbilitato: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SoggettoAbilitato>>;
    public getSoggettoAbilitatoById(idSeoggettoAbilitato: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SoggettoAbilitato>>;
    public getSoggettoAbilitatoById(idSeoggettoAbilitato: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idSeoggettoAbilitato === null || idSeoggettoAbilitato === undefined) {
            throw new Error('Required parameter idSeoggettoAbilitato was null or undefined when calling getSoggettoAbilitatoById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<SoggettoAbilitato>(`${this.basePath}/soggetto-abilitato/${encodeURIComponent(String(idSeoggettoAbilitato))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * SoggettoAbilitato
     * 
     * @param cfSoggetto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSoggettoAbilitatoBycfSoggetto(cfSoggetto: string, observe?: 'body', reportProgress?: boolean): Observable<SoggettoAbilitato>;
    public getSoggettoAbilitatoBycfSoggetto(cfSoggetto: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SoggettoAbilitato>>;
    public getSoggettoAbilitatoBycfSoggetto(cfSoggetto: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SoggettoAbilitato>>;
    public getSoggettoAbilitatoBycfSoggetto(cfSoggetto: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cfSoggetto === null || cfSoggetto === undefined) {
            throw new Error('Required parameter cfSoggetto was null or undefined when calling getSoggettoAbilitatoBycfSoggetto.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<SoggettoAbilitato>(`${this.basePath}/soggetto-abilitato/cf-soggetto/${encodeURIComponent(String(cfSoggetto))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Post SoggettoAbilitato
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postSoggettoAbilitato(body?: SoggettoAbilitato, observe?: 'body', reportProgress?: boolean): Observable<SoggettoAbilitato>;
    public postSoggettoAbilitato(body?: SoggettoAbilitato, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SoggettoAbilitato>>;
    public postSoggettoAbilitato(body?: SoggettoAbilitato, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SoggettoAbilitato>>;
    public postSoggettoAbilitato(body?: SoggettoAbilitato, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SoggettoAbilitato>(`${this.basePath}/soggetto-abilitato`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Put SoggettoAbilitato
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putSoggettoAbilitato(body?: SoggettoAbilitato, observe?: 'body', reportProgress?: boolean): Observable<SoggettoAbilitato>;
    public putSoggettoAbilitato(body?: SoggettoAbilitato, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SoggettoAbilitato>>;
    public putSoggettoAbilitato(body?: SoggettoAbilitato, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SoggettoAbilitato>>;
    public putSoggettoAbilitato(body?: SoggettoAbilitato, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<SoggettoAbilitato>(`${this.basePath}/soggetto-abilitato`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Annulla o ripristina un SoggettoAbilitato impostando dataAnnullamento a data di sistema
     * 
     * @param idSoggettoAbilitato 
     * @param flgAutorizzazione 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setDataAnnullamento(idSoggettoAbilitato: number, flgAutorizzazione: boolean, observe?: 'body', reportProgress?: boolean): Observable<SetDataAnnullamentoSoggettoAbilitatoRes>;
    public setDataAnnullamento(idSoggettoAbilitato: number, flgAutorizzazione: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SetDataAnnullamentoSoggettoAbilitatoRes>>;
    public setDataAnnullamento(idSoggettoAbilitato: number, flgAutorizzazione: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SetDataAnnullamentoSoggettoAbilitatoRes>>;
    public setDataAnnullamento(idSoggettoAbilitato: number, flgAutorizzazione: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idSoggettoAbilitato === null || idSoggettoAbilitato === undefined) {
            throw new Error('Required parameter idSoggettoAbilitato was null or undefined when calling setDataAnnullamento.');
        }
        if (flgAutorizzazione === null || flgAutorizzazione === undefined) {
            throw new Error('Required parameter flgAutorizzazione was null or undefined when calling setDataAnnullamento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<SetDataAnnullamentoSoggettoAbilitatoRes>(`${this.basePath}/soggetto-abilitato/data-annullamento/id-soggetto-abilitato/${encodeURIComponent(String(idSoggettoAbilitato))}auto/${encodeURIComponent(String(flgAutorizzazione))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
