/**
 * ComonlWeb
 * API per ComonlWeb
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { Comunicazione } from '../model/comunicazione';
import { Lavoratore } from '../model/lavoratore';
import { WrapperComunicazione } from '../model/wrapperComunicazione';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { ComunicazioneControlliServiceInterface }                            from './comunicazioneControlli.serviceInterface';


@Injectable()
export class ComunicazioneControlliService implements ComunicazioneControlliServiceInterface {

    protected basePath = 'http://localhost:8080/comonlweb/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Comunicazione
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkDatiEssenziali(body?: WrapperComunicazione, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public checkDatiEssenziali(body?: WrapperComunicazione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public checkDatiEssenziali(body?: WrapperComunicazione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public checkDatiEssenziali(body?: WrapperComunicazione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/comunicazione/checkDatiEssenziali`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Controlla la sezione azienda utilizzatrice
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chkAziendaUtilizzatrice(body?: WrapperComunicazione, observe?: 'body', reportProgress?: boolean): Observable<Comunicazione>;
    public chkAziendaUtilizzatrice(body?: WrapperComunicazione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Comunicazione>>;
    public chkAziendaUtilizzatrice(body?: WrapperComunicazione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Comunicazione>>;
    public chkAziendaUtilizzatrice(body?: WrapperComunicazione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Comunicazione>(`${this.basePath}/comunicazione/chkAziendaUtilizzatrice`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Controlla la sezione dei dati del datorePrecedente di una comunicazione di vardatori trasefrimento
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chkDatiAziendaPrecedente(body?: Comunicazione, observe?: 'body', reportProgress?: boolean): Observable<Comunicazione>;
    public chkDatiAziendaPrecedente(body?: Comunicazione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Comunicazione>>;
    public chkDatiAziendaPrecedente(body?: Comunicazione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Comunicazione>>;
    public chkDatiAziendaPrecedente(body?: Comunicazione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Comunicazione>(`${this.basePath}/comunicazione/chkDatiAziendaPrecedente`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Controlla la sezione dei dati generali
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chkDatiGenerali(body?: WrapperComunicazione, observe?: 'body', reportProgress?: boolean): Observable<Comunicazione>;
    public chkDatiGenerali(body?: WrapperComunicazione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Comunicazione>>;
    public chkDatiGenerali(body?: WrapperComunicazione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Comunicazione>>;
    public chkDatiGenerali(body?: WrapperComunicazione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Comunicazione>(`${this.basePath}/comunicazione/chkDatiGenerali`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Controlla la sezione dei dati generali
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chkDatiGeneraliVardatori(body?: WrapperComunicazione, observe?: 'body', reportProgress?: boolean): Observable<Comunicazione>;
    public chkDatiGeneraliVardatori(body?: WrapperComunicazione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Comunicazione>>;
    public chkDatiGeneraliVardatori(body?: WrapperComunicazione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Comunicazione>>;
    public chkDatiGeneraliVardatori(body?: WrapperComunicazione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Comunicazione>(`${this.basePath}/comunicazione/chkDatiGeneraliVardatori`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Controlla la sezione dei dati anagrafici impresa
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chkImpresa(body?: WrapperComunicazione, observe?: 'body', reportProgress?: boolean): Observable<Comunicazione>;
    public chkImpresa(body?: WrapperComunicazione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Comunicazione>>;
    public chkImpresa(body?: WrapperComunicazione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Comunicazione>>;
    public chkImpresa(body?: WrapperComunicazione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Comunicazione>(`${this.basePath}/comunicazione/chkImpresa`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Controlla la sezione dei dati anagrafici del lavoratore
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chkLavoratore(body?: Lavoratore, observe?: 'body', reportProgress?: boolean): Observable<Lavoratore>;
    public chkLavoratore(body?: Lavoratore, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Lavoratore>>;
    public chkLavoratore(body?: Lavoratore, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Lavoratore>>;
    public chkLavoratore(body?: Lavoratore, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Lavoratore>(`${this.basePath}/comunicazione/chkLavoratore`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Controlla la sezione dei dati anagrafici dei lavoratori associati alla comunicazione
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chkLavoratoriComunicazione(body?: WrapperComunicazione, observe?: 'body', reportProgress?: boolean): Observable<Comunicazione>;
    public chkLavoratoriComunicazione(body?: WrapperComunicazione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Comunicazione>>;
    public chkLavoratoriComunicazione(body?: WrapperComunicazione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Comunicazione>>;
    public chkLavoratoriComunicazione(body?: WrapperComunicazione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Comunicazione>(`${this.basePath}/comunicazione/chkLavoratoriComunicazione`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Controlla la sezione dei dati del rapporto di lavoro
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chkRapporto(body?: Comunicazione, observe?: 'body', reportProgress?: boolean): Observable<Comunicazione>;
    public chkRapporto(body?: Comunicazione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Comunicazione>>;
    public chkRapporto(body?: Comunicazione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Comunicazione>>;
    public chkRapporto(body?: Comunicazione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Comunicazione>(`${this.basePath}/comunicazione/chkRapporto`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Comunicazione
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chkRiepilogo(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ApiError>>;
    public chkRiepilogo(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ApiError>>>;
    public chkRiepilogo(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ApiError>>>;
    public chkRiepilogo(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling chkRiepilogo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<ApiError>>(`${this.basePath}/comunicazione/chkRiepilogo/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Controlla la tripletta rapportoVd, lavoratoreVd, sedeLavoroVd di una comunicazione di vardatori trasferimento
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chkSediLavoro(body?: Comunicazione, observe?: 'body', reportProgress?: boolean): Observable<Comunicazione>;
    public chkSediLavoro(body?: Comunicazione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Comunicazione>>;
    public chkSediLavoro(body?: Comunicazione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Comunicazione>>;
    public chkSediLavoro(body?: Comunicazione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Comunicazione>(`${this.basePath}/comunicazione/chkSediLavoro`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Controlla la sezione dei dati del tutore
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chkTutore(body?: Comunicazione, observe?: 'body', reportProgress?: boolean): Observable<Comunicazione>;
    public chkTutore(body?: Comunicazione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Comunicazione>>;
    public chkTutore(body?: Comunicazione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Comunicazione>>;
    public chkTutore(body?: Comunicazione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Comunicazione>(`${this.basePath}/comunicazione/chkTutore`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
