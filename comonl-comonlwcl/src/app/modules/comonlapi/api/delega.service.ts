/**
 * ComonlWeb
 * API per ComonlWeb
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { Delega } from '../model/delega';
import { FormRicercaDelega } from '../model/formRicercaDelega';
import { PagedResponseRicercaDeleghe } from '../model/pagedResponseRicercaDeleghe';
import { PostDelegaResponse } from '../model/postDelegaResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { DelegaServiceInterface }                            from './delega.serviceInterface';


@Injectable()
export class DelegaService implements DelegaServiceInterface {

    protected basePath = 'http://localhost:8080/comonlweb/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * aggiorna - inserisce delega
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public aggiornaDelega(body?: Delega, observe?: 'body', reportProgress?: boolean): Observable<PostDelegaResponse>;
    public aggiornaDelega(body?: Delega, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PostDelegaResponse>>;
    public aggiornaDelega(body?: Delega, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PostDelegaResponse>>;
    public aggiornaDelega(body?: Delega, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PostDelegaResponse>(`${this.basePath}/delega/aggiorna`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * aggiorna stato delega
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public aggiornaStatoDelega(body?: Delega, observe?: 'body', reportProgress?: boolean): Observable<Delega>;
    public aggiornaStatoDelega(body?: Delega, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Delega>>;
    public aggiornaStatoDelega(body?: Delega, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Delega>>;
    public aggiornaStatoDelega(body?: Delega, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Delega>(`${this.basePath}/delega/aggiorna-stato`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ricerca deleghe
     * 
     * @param body 
     * @param offset 
     * @param limit 
     * @param sort 
     * @param direction 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postRicercaDeleghe(body?: FormRicercaDelega, offset?: number, limit?: number, sort?: string, direction?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedResponseRicercaDeleghe>;
    public postRicercaDeleghe(body?: FormRicercaDelega, offset?: number, limit?: number, sort?: string, direction?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResponseRicercaDeleghe>>;
    public postRicercaDeleghe(body?: FormRicercaDelega, offset?: number, limit?: number, sort?: string, direction?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResponseRicercaDeleghe>>;
    public postRicercaDeleghe(body?: FormRicercaDelega, offset?: number, limit?: number, sort?: string, direction?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResponseRicercaDeleghe>(`${this.basePath}/delega/ricerca`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Stampa ricerca deleghe
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stampaRicercaDeleghe(body?: FormRicercaDelega, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public stampaRicercaDeleghe(body?: FormRicercaDelega, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public stampaRicercaDeleghe(body?: FormRicercaDelega, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public stampaRicercaDeleghe(body?: FormRicercaDelega, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/pdf'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/delega/stampa-ricerca-deleghe`,
            body,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
